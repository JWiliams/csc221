(1)
In [1]: import PyPDF2

In [2]: pdfFileObj = open('meetingminutes.pdf', 'rb')

In [3]: pdfReader = PyPDF2.PdfFileReader(pdfFileObj)

In [4]: pdfReader.numPages
Out[4]: 19

In [5]: pageObj = pdfReader.getPage(0)

In [6]: pageObj.extractText()
Out[6]: 'OOFFFFIICCIIAALL  BBOOAARRDD  MMIINNUUTTEESS   Meeting of \nMarch 7\n, 2014\n        
\n     The Board of Elementary and Secondary Education shall provide leadership and 
\ncreate policies for education that expand opportunities for children, empower 
\nfamilies and communities, and advance Louisiana in an increasingly \ncompetitive 
glob\nal market.\n BOARD \n of ELEMENTARY\n and \n SECONDARY\n EDUCATION\n  '

In [7]: pdfFileObj.close()

(2)
In [2]: import PyPDF2

In [3]: minutesFile = open('meetingminutes.pdf', 'rb')

In [5]: pdfReader = PyPDF2.PdfFileReader(minutesFile)

In [6]: page = pdfReader.getPage(0)

In [7]: page.rotateClockwise(90)
Out[7]:
{'/Contents': [IndirectObject(961, 0),
  IndirectObject(962, 0),
  IndirectObject(963, 0),
  IndirectObject(964, 0),
  IndirectObject(965, 0),
  IndirectObject(966, 0),
  IndirectObject(967, 0),...

In [8]: pdfWriter = PyPDF2.PdfFileWriter()

In [9]: pdfWriter.addPage(page)

In [10]: resultPdfFile=open('rotatedPage.pdf', 'wb')

In [11]: pdfWriter.write(resultPdfFile)

In [12]: resultPdfFile.close()

In [13]: minutesFile.close()

(3)
In [1]: import PyPDF2

In [2]: minutesFile = open('meetingminutes.pdf', 'rb')

In [3]: pdfReader = PyPDF2.PdfFileReader(minutesFile)

In [4]: minutesFirstPage = pdfReader.getPage(0)

In [5]: pdfWatermarkReader = PyPDF2.PdfFileReader('watermark.pdf')

In [8]: minutesFirstPage.mergePage(pdfWatermarkReader.getPage(0))

In [9]: pdfWriter = PyPDF2.PdfFileWriter()

In [10]: pdfWriter.addPage(minutesFirstPage)

In [11]: for pageNum in range(1, pdfReader.numPages):
    ...:     pageObj = pdfReader.getPage(pageNum)
    ...:     pdfWriter.addPage(pageObj)
    ...:

In [12]: resultPdfFile = open('watermarkedCover.pdf', 'wb')

In [13]: pdfWriter.write(resultPdfFile)

In [14]: minutesFile.close()

In [15]: resultPdfFile.close()

(4)
In [1]: import docx

In [2]: doc = docx.Document('demo.docx')

In [4]: len(doc.paragraphs)
Out[4]: 7

In [5]: doc.paragraphs[0].text
Out[5]: 'Document Title'

In [6]: doc.paragraphs[1].text
Out[6]: 'A plain paragraph with some bold and some italic'

In [7]: len(doc.paragraphs[1].runs)
Out[7]: 5

In [8]: doc.paragraphs[1].runs[0].text
Out[8]: 'A plain paragraph with'

In [9]: doc.paragraphs[1].runs[1].text
Out[9]: ' some '

In [10]: doc.paragraphs[1].runs[2].text
Out[10]: 'bold'

In [11]: doc.paragraphs[1].runs[3].text
Out[11]: ' and some '

In [12]: doc.paragraphs[1].runs[4].text
Out[12]: 'italic'

(5)
In [1]: import readDocx

In [2]: print(readDocx.getText('demo.docx'))
Document Title

A plain paragraph with some bold and some italic

Heading, level 1

Intense quote

first item in unordered list

first item in ordered list

(6)
In [2]: import docx

In [3]: doc = docx.Document('demo.docx')

In [4]: doc.paragraphs[0].text
Out[4]: 'Document Title'

In [5]: doc.paragraphs[0].style
Out[5]: _ParagraphStyle('Title') id: 94913800

In [6]: doc.paragraphs[0].style = 'Normal'

In [8]: doc.paragraphs[1].text
Out[8]: 'A plain paragraph with some bold and some italic'

In [9]: (doc.paragraphs[1].runs[0].text, doc.paragraphs[1].runs[1].text, doc.paragraphs[1].runs[2].text, doc.paragraphs[1].runs[3].text)
Out[9]: ('A plain paragraph with', ' some ', 'bold', ' and some ')

In [12]: doc.paragraphs[1].runs[0].style = 'QuoteChar'
C:\Users\jwjjw\AppData\Roaming\Python\Python38\site-packages\docx\styles\styles.py:139: UserWarning: style lookup by style_id is deprecated. Use style name as key instead.
  return self._get_style_id_from_style(self[style_name], style_type)

In [14]: doc.paragraphs[1].runs[1].underline = True

In [15]: doc.paragraphs[1].runs[3].underline = True

In [16]: doc.save('restyled.docx')

(7)
In [1]: import docx

In [2]: doc = docx.Document()

In [3]: doc.add_picture('zophie.png', width=docx.shared.Inches(1), height=docx.shared.Cm(4))
Out[3]: <docx.shape.InlineShape at 0x6ecf5c8>

In [4]: doc.save('catDocument.docx')

In [5]: exit()
